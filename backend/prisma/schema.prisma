generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  hashedPassword  String
  name            String?
  phone           String?
  birthday        DateTime?
  gender          String?
  stylePreferences String?
  role            String?
  branchId        String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastLogin       DateTime?
  status          String?
  artistAppointments Appointment[] @relation("ArtistAppointments")
  appointments       Appointment[]
  orders             Order[]
  member             Member?
  artist             Artist?
  branch             Branch?       @relation(fields: [branchId], references: [id])
  topupHistory       TopupHistory[]
  portfolioItems     PortfolioItem[]
  notifications      Notification[]
  completedServicesAsCustomer CompletedService[] @relation("CustomerCompletedServices")
  completedServicesAsArtist   CompletedService[] @relation("ArtistCompletedServices")
  customerNotes               CustomerNote[]
  customerReminders           CustomerReminder[]
  createdCustomerNotes        CustomerNote[] @relation("CustomerNoteCreator")
  createdCustomerReminders    CustomerReminder[] @relation("CustomerReminderCreator")
  
  @@index([branchId, role, isActive])
  @@index([role, createdAt])
  @@index([email])
}

model Member {
  id              String @id @default(cuid())
  userId          String @unique
  totalSpent      Int    @default(0)    // 累計消費
  balance         Int    @default(0)    // 儲值餘額
  membershipLevel String?               // 會員等級

  user User @relation(fields: [userId], references: [id])
  topupHistory TopupHistory[]
}


model Branch {
  id            String         @id @default(cuid())
  name          String
  address       String
  phone         String?
  businessHours Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  appointments  Appointment[]
  orders        Order[]
  artists       Artist[]
  users         User[]
  completedServices CompletedService[]
  contacts      Contact[]
}

model Artist {
  id          String   @id @default(cuid())
  userId      String   @unique
  displayName String?
  bio         String?
  styles      Json?
  speciality  String?
  portfolioUrl String?
  photoUrl    String?
  branchId    String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  availability ArtistAvailability[]
  branch      Branch?  @relation(fields: [branchId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@map("TattooArtist")   // 讓 Artist 模型對應到既有的 TattooArtist 表
}

model ArtistAvailability {
  id           String       @id @default(cuid())
  artistId     String
  weekday      Int?
  specificDate DateTime?
  startTime    String
  endTime      String
  isBlocked    Boolean      @default(false)
  repeatRule   String?
  artist       Artist @relation(fields: [artistId], references: [id])
}

model Service {
  id           String           @id @default(cuid())
  name         String
  description  String
  isActive     Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  category     String?
  currency     String           @default("TWD")
  durationMin  Int
  imageUrl     String?
  price        Int
  appointments Appointment[]
  history      ServiceHistory[]
  completedServices CompletedService[]
}

model Appointment {
  id        String            @id @default(cuid())
  branchId  String
  artistId  String?
  serviceId String?
  contactId String?
  startAt   DateTime
  endAt     DateTime
  status    AppointmentStatus @default(PENDING)
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  userId    String
  orderId   String?           @unique
  artist    User?             @relation("ArtistAppointments", fields: [artistId], references: [id])
  branch    Branch            @relation(fields: [branchId], references: [id])
  service   Service?          @relation(fields: [serviceId], references: [id])
  user      User              @relation(fields: [userId], references: [id])
  contact   Contact?          @relation(fields: [contactId], references: [id])
  order     Order?
  completedService CompletedService?
  
  @@index([branchId, createdAt, status])
  @@index([status, startAt])
  @@index([artistId, status])
  @@index([serviceId, createdAt])
}

model Order {
  id            String        @id @default(cuid())
  memberId      String
  branchId      String
  appointmentId String?       @unique
  totalAmount   Int
  discount      Int?          @default(0)
  finalAmount   Int           @default(0)
  paymentType   PaymentType
  status        OrderStatus   @default(PENDING_PAYMENT)
  paymentMethod String?       // 現金、信用卡、匯款等
  paidAt        DateTime?
  notes         String?
  isInstallment Boolean       @default(false) // 是否為分期付款
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  installments  Installment[]
  branch        Branch        @relation(fields: [branchId], references: [id])
  member        User          @relation(fields: [memberId], references: [id])
  appointment   Appointment?  @relation(fields: [appointmentId], references: [id])
  
  @@index([branchId, createdAt, status])
  @@index([memberId, status])
  @@index([status, createdAt])
}

model Installment {
  id            String            @id @default(cuid())
  orderId       String
  installmentNo Int
  dueDate       DateTime
  amount        Int
  status        InstallmentStatus @default(UNPAID)
  paidAt        DateTime?
  paymentMethod String?           // 付款方式：現金、信用卡、匯款等
  notes         String?           // 備註，可記錄交易碼
  isCustom      Boolean           @default(false)  // 是否為人工調整的金額
  autoAdjusted  Boolean           @default(false)  // 是否經過系統自動重新分配
  order         Order             @relation(fields: [orderId], references: [id])

  @@unique([orderId, installmentNo])
}

model ServiceHistory {
  id        String   @id @default(cuid())
  serviceId String
  field     String
  oldValue  String?
  newValue  String?
  updatedBy String
  updatedAt DateTime @default(now())
  service   Service  @relation(fields: [serviceId], references: [id])
}

enum Role {
  BOSS
  BRANCH_MANAGER
  SUPER_ADMIN
  ARTIST
  MEMBER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum PaymentType {
  ONE_TIME
  INSTALLMENT
}

enum OrderStatus {
  PENDING_PAYMENT  // 待結帳
  PARTIALLY_PAID  // 部分付款（分期付款中）
  INSTALLMENT_ACTIVE  // 分期付款中
  PAID
  PAID_COMPLETE  // 分期付款完成
  CANCELLED
  COMPLETED
}

enum InstallmentStatus {
  UNPAID
  PAID
  OVERDUE    // 逾期
  CANCELLED  // 取消
}

model TopupHistory {
  id          String   @id @default(cuid())
  member      Member   @relation(fields: [memberId], references: [id])
  memberId    String
  operator    User     @relation(fields: [operatorId], references: [id])
  operatorId  String
  amount      Int
  type        String   @default("TOPUP")  // "TOPUP" | "SPEND"
  createdAt   DateTime @default(now())
}

model PortfolioItem {
  id          String   @id @default(cuid())
  artistId    String
  title       String
  description String?
  imageUrl    String
  tags        Json     // Array of strings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  artist      User     @relation(fields: [artistId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String   // "APPOINTMENT" | "MESSAGE" | "SYSTEM"
  isRead    Boolean  @default(false)
  data      Json?    // Additional data for the notification
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model CompletedService {
  id            String   @id @default(cuid())
  appointmentId String   @unique
  customerId    String
  artistId      String
  serviceId     String
  branchId      String
  serviceName   String
  servicePrice  Int
  serviceDuration Int
  completedAt   DateTime @default(now())
  notes         String?
  
  // Relations
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  customer      User        @relation("CustomerCompletedServices", fields: [customerId], references: [id])
  artist        User        @relation("ArtistCompletedServices", fields: [artistId], references: [id])
  service       Service     @relation(fields: [serviceId], references: [id])
  branch        Branch      @relation(fields: [branchId], references: [id])
  
  @@index([branchId, completedAt])
  @@index([artistId, completedAt])
  @@index([serviceId, completedAt])
}

// 客戶標註模型
model CustomerNote {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  createdBy String   // 關聯到 User.id (刺青師)
  customer  User     @relation(fields: [customerId], references: [id])
  customerId String
  
  // Relations
  creator   User     @relation("CustomerNoteCreator", fields: [createdBy], references: [id])
}

// 客戶提醒模型
model CustomerReminder {
  id        String   @id @default(cuid())
  title     String
  date      DateTime
  note      String?
  createdAt DateTime @default(now())
  createdBy String   // 關聯到 User.id (刺青師)
  customer  User     @relation(fields: [customerId], references: [id])
  customerId String
  
  // Relations
  creator   User     @relation("CustomerReminderCreator", fields: [createdBy], references: [id])
}

// 聯絡表單模型
model Contact {
  id           String         @id @default(cuid())
  name         String
  email        String
  phone        String?
  branchId     String
  notes        String?
  status       String         @default("PENDING") // PENDING, CONTACTED, CONVERTED, CLOSED
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  // Relations
  branch       Branch         @relation(fields: [branchId], references: [id])
  appointments Appointment[]
}
